
% ######## block 1 #########
% get aline calsig data
fn = 'dff_ZL_h35_20161127_fied1_d150_3x';       %#####################################################
load(fn);
temp = dff_subtr_preSoundmean;   % dff_subtr_preSoundmean  dff_prctileF0  dff_meanF0   #####################################################
SmoothBand = 11;


length_frames_T = length([F_num_T(1,1):F_num_T(1,2)]);
length_frames_A = length([F_num_A(1,1):F_num_A(1,2)]);
for nROI = 1:nROIs
    for triN = 1:TrialN
        CaSigAlineTone{nROI}(triN,:) = temp{nROI}(triN,[F_num_T(triN,1):F_num_T(triN,2)]);  % get the same frames before and after tone onset 
        CaSigMean_Tone{nROI}(triN,:) = smooth(CaSigAlineTone{nROI}(triN,:),SmoothBand); % use smooth to get the moving average value
        if F_num_A(triN,1) <1
            CaSigAlineAct{nROI}(triN,:) = temp{nROI}(triN,[1:F_num_A(triN,2)-F_num_A(triN,1)+1]);
        else
            CaSigAlineAct{nROI}(triN,:) = temp{nROI}(triN,[F_num_A(triN,1):F_num_A(triN,2)]);  % get the same frames before and after choice 
        end
        CaSigMean_Act{nROI}(triN,:) = smooth(CaSigAlineAct{nROI}(triN,:),SmoothBand); 
    end    
end
AlineCaSigData.CaSigAlineTone = CaSigAlineTone;
AlineCaSigData.CaSigMean_Tone = CaSigMean_Tone;
AlineCaSigData.CaSigAlineAct = CaSigAlineAct;
AlineCaSigData.CaSigMean_Act = CaSigMean_Act;
AlineCaSigData.length_frames_T = length_frames_T;
AlineCaSigData.length_frames_A = length_frames_A;
save(fn,'AlineCaSigData','-append');
%% ######## block 2 #########
% set trials type want to test
fn = 'dff_ZL_h35_20161127_fied1_d150_3x';
load(fn);
%%
temp_Ind = 1; % ######################   Select  trials that are needed:  1:AllTri    2:MisExcl   3:ProbTri   4:NonProbTri 
              % ######################   5.ProbTriMisExcl 6.NonProbTriMisExcl 7.LowCorrTri 8.HignCorrTri
temp_Type = 2;% ############   Select  labels that are needed:  1:LowHighTyp    2:NovUnnovTyp   3:LeftRightType   
UseRaw = 0; % 0: use smooth mean   1 :use the raw data 

CaSigAlineTone = AlineCaSigData.CaSigAlineTone;
CaSigMean_Tone = AlineCaSigData.CaSigMean_Tone;
CaSigAlineAct = AlineCaSigData.CaSigAlineAct;
CaSigMean_Act = AlineCaSigData.CaSigMean_Act;
length_frames_T = AlineCaSigData.length_frames_T;
length_frames_A = AlineCaSigData.length_frames_A;

AllTri = [1:TrialN];            % Define trials that are used
MisExcl = find(Miss_Ind==0);
ProbTri = find(Probe_Ind==1);
NonProbTri = find(Probe_Ind==0);
ProbTriMisExcl = find(~Miss_Ind & Probe_Ind);
NonProbTriMisExcl = find(~Miss_Ind & ~Probe_Ind);
LowCorrTri = find(Trial_type == 0 & Action_choice == Trial_type);
HignCorrTri = find(Trial_type == 1 & Action_choice == Trial_type);
Trials = {AllTri,MisExcl,ProbTri,NonProbTri,ProbTriMisExcl,NonProbTriMisExcl,LowCorrTri,HignCorrTri};
TrialsName = {'AllTri','MisExcl','ProbTri','NonProbTri','ProbTriMisExcl','NonProbTriMisExcl','LowCorrTri','HignCorrTri'};

LowHighTyp = double(Trial_type)';        % Define Label: 0 and 1
NovUnnovTyp = double(Probe_Ind)';
LeftRightType = double(Action_choice)';
MisNonMisType = double(Miss_Ind)';

Labels = {LowHighTyp,NovUnnovTyp,LeftRightType,MisNonMisType};   % ##################
LabelsName = {'LowHighTyp','NovUnnovTyp','LeftRightType','MisNonMis'};   % ##################

LabelType = Labels{temp_Type}(Trials{temp_Ind});
if isfield(ROCout,['MeanT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))])
    warning('There exist the varables!!!!!!!!!!!!!!!!!!!!!!');
end
% AnswFram = AnswFramAlineByTone(Trials{temp_Ind});
%% ######## block 3 #########
% get all neuron's AUC/ROC
StartT = tic;
for nROI = 1:nROIs  % for tone aline data
    parfor FrT = 1:length_frames_T
        if ~UseRaw 
            ROCout1_temp(FrT) = ZL_roc_v1([CaSigMean_Tone{nROI}(Trials{temp_Ind},FrT),LabelType],0,0.05,0);
        else
            ROCout1_temp(FrT) = ZL_roc_v1([CaSigAlineTone{nROI}(Trials{temp_Ind},FrT),LabelType],0,0.05,0);
        end
    end
    ROCout1{nROI} = ROCout1_temp;    
    disp(nROI);
end
toc(StartT);
if UseRaw == 0
    ROCout.(['MeanT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]) = ROCout1;
else
    ROCout.(['RawT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]) = ROCout1;   
end
%%
for nROI = 1:nROIs   % for choice aline data
    parfor FrA = 1:length_frames_A
        if ~UseRaw
            ROCout2_temp(FrA) = ZL_roc_v1([CaSigMean_Act{nROI}(Trials{temp_Ind},FrA),LabelType],0,0.05,0);
        else
            ROCout2_temp(FrA) = ZL_roc_v1([CaSigAlineAct{nROI}(Trials{temp_Ind},FrA),LabelType],0,0.05,0);
        end
    end    
    ROCout2{nROI} = ROCout2_temp;   
    disp(nROI)
end
toc(StartT);
if UseRaw == 0
    ROCout.(['MeanA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))])  = ROCout2;
else
    ROCout.(['RawA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))])  = ROCout2;    
end
%  ######## block 4 #########
% get the max AUC frame's significant threshold
AucTone = ROCout.MeanT_ROCout_AllTri_NovUnnovTyp;
AucAct = ROCout.MeanA_ROCout_AllTri_NovUnnovTyp;
for nROI = 1:nROIs % for tone aline data
    AllAucVal_T = arrayfun(@(x) x.AUC, AucTone{nROI});
    T_ind = find(AllAucVal_T == max(AllAucVal_T));
    TMaxAUCFrame(nROI) = T_ind;    
    [AllROC,~,sigvalue]=ROCSiglevelGene([CaSigMean_Tone{nROI}(Trials{temp_Ind},T_ind),LabelType],500,1,0.01);  % use shuffle data to get threshold
    ToneRocShuffThresh(nROI) = sigvalue; 
    disp(nROI);
end
if UseRaw == 0
    ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre'])(1,:) = ToneRocShuffThresh;
    ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd'])(1,:) = TMaxAUCFrame;
else  
    ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre'])(1,:) = ToneRocShuffThresh;
    ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd'])(1,:) = TMaxAUCFrame;
end
for nROI = 1:nROIs % for choice aline data
    AllAucVal_A = arrayfun(@(x) x.AUC, AucAct{nROI});  
    A_ind = find(AllAucVal_A == max(AllAucVal_A));
    AMaxAUCFrame(nROI) = A_ind;
    if A_ind <= length_frames_A
        [AllROC,~,sigvalue]=ROCSiglevelGene([CaSigMean_Act{nROI}(Trials{temp_Ind},A_ind),LabelType],500,1,0.01);  % use shuffle data to get threshold
    else
        sigvalue = NaN;
        AMaxAUCFrame(nROI)=NaN;
    end
        ActRocShuffThresh(nROI) = sigvalue;
    disp(nROI);
end
if UseRaw == 0
    ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre'])(2,:) = ActRocShuffThresh;
    ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd'])(2,:) = AMaxAUCFrame;
else  
    ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre'])(2,:) = ActRocShuffThresh;
    ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd'])(2,:) = AMaxAUCFrame;
end
save(fn,'ROCout','-append');

%% ######## block 3 #########
% get all neuron's AUC/ROC  and the max AUC frame's significant threshold
% at the same time
StartT = tic;
for nROI = 1:nROIs
    tic
    parfor FrT = 1:length_frames_T
        if ~UseRaw 
            ROCout1_temp(FrT) = ZL_roc_v1([CaSigMean_Tone{nROI}(Trials{temp_Ind},FrT),LabelType],0,0.05,0);
            if FrT <= length_frames_A
                ROCout2_temp(FrT) = ZL_roc_v1([CaSigMean_Act{nROI}(Trials{temp_Ind},FrT),LabelType],0,0.05,0);
            end
        else
            ROCout1_temp(FrT) = ZL_roc_v1([CaSigAlineTone{nROI}(Trials{temp_Ind},FrT),LabelType],0,0.05,0);
            if FrT <= length_frames_A
               ROCout2_temp(FrT) = ZL_roc_v1([CaSigAlineAct{nROI}(Trials{temp_Ind},FrT),LabelType],0,0.05,0); 
            end
        end
    end 
    ROCout1{nROI} = ROCout1_temp; 
    ROCout2{nROI} = ROCout2_temp;   
    
    AllAucVal_T = arrayfun(@(x) x.AUC, ROCout1{nROI});
    AllAucVal_A = arrayfun(@(x) x.AUC, ROCout2{nROI});
    T_ind = find(AllAucVal_T == max(AllAucVal_T));
    TMaxAUCFrame(nROI) = T_ind;    
    A_ind = find(AllAucVal_A == max(AllAucVal_A));
    AMaxAUCFrame(nROI) = A_ind;
    [AllROC,~,sigvalue]=ROCSiglevelGene([CaSigMean_Tone{nROI}(Trials{temp_Ind},T_ind),LabelType],500,1,0.01);  % use shuffle data to get threshold
    ToneRocShuffThresh(nROI) = sigvalue; 
    [AllROC,~,sigvalue]=ROCSiglevelGene([CaSigAlineAct{nROI}(Trials{temp_Ind},A_ind),LabelType],500,1,0.01);  % use shuffle data to get threshold
    ActRocShuffThresh(nROI) = sigvalue;
       
    toc
    disp(num2str(nROI));
end
toc(StartT);

%%
if UseRaw == 0
    ROCout.(['MeanT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]) = ROCout1;
    ROCout.(['MeanA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))])  = ROCout2;
    ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre']) = [ToneRocShuffThresh;ActRocShuffThresh];
    ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd']) = [TMaxAUCFrame;AMaxAUCFrame];
else
    ROCout.(['RawT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]) = ROCout1;
    ROCout.(['RawA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))])  = ROCout2;    
    ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre']) = [ToneRocShuffThresh;ActRocShuffThresh];
    ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd']) = [TMaxAUCFrame;AMaxAUCFrame];
end

save(fn,'ROCout','-append');
% save([fn(8:19) '_ROCout'],'ROCout','-append');
%% Plotting of AllTri_LowHighTyp
fn = 'dff_ZL_h35_20161127_fied1_d150_3x';  %% use dff filename
load(fn);
%%
AlineType = 0;  % 0: aline to tone   1:aline to choice  ########################
UseRawData = 0;  % 0: Use smooth Mean data   1:Use un mean data  ########################
temp_Ind = 1; %   1:AllTri    2:MisExcl   3:ProbTri   4:NonProbTri 5.ProbTriMisExcl 6.NonProbTriMisExcl
temp_Type = 2;%   1:LowHighTyp    2:NovUnnovTyp   3:LeftRightType 4:MisNonMis
savefig = 1; % 0: don't save 1: save the fig
savePNG = 1; % 0: don't save 1: save to PPT

TrialsName = {'AllTri','MisExcl','ProbTri','NonProbTri','ProbTriMisExcl','NonProbTriMisExcl'};
LabelsName = {'LowHighTyp','NovUnnovTyp','LeftRightType','MisNonMis'};

if ~exist(['ROC_plot']);
    mkdir(['ROC_plot']);    
end 
cd (['ROC_plot']);
DirName = ['ROC_' LabelsName{temp_Type}];
if ~exist(DirName);
    mkdir(DirName);
end  
cd(DirName);
SavePath = pwd; 
cd ..   
cd ..
if AlineType == 0
    if UseRawData == 0
        plot_data = ROCout.(['MeanT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]);  
%         AUC_ShufThre = ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre'])(1,:);
%         MaxAUCInd = ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd'])(1,:);
        if ~exist(['MeanT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]);
            DirName = ['MeanT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))];          
        end
    else
        plot_data = ROCout.(['RawT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]);
%         AUC_ShufThre = ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre'])(1,:);
%         MaxAUCInd = ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd'])(1,:);
        if ~exist(['RawT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]);
            DirName = ['RawT_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))];            
        end          
    end
    Frame_length = AlineCaSigData.length_frames_T;
    OriginPoint = double(MinOnsFrame);
    OnsetMark = 'Stim';
else
    if UseRawData == 0
        plot_data = ROCout.(['MeanA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]);
%         AUC_ShufThre = ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre'])(2,:);
%         MaxAUCInd = ROCout.(['Mean_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd'])(2,:);
        if ~exist(['MeanA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]);
            DirName = ['MeanA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))];          
        end        
    else
        plot_data = ROCout.(['RawA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]);
%         AUC_ShufThre = ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_ShufThre'])(2,:);
%         MaxAUCInd = ROCout.(['Raw_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type)) '_MaxInd'])(2,:);
        if ~exist(['RawA_ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]);
            DirName = ['RawA _ROCout_' cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))];            
        end        
    end 
    Frame_length = AlineCaSigData.length_frames_A;
    OriginPoint = double(MinActFrame);
    OnsetMark = 'Choice'
end
%
% Z_Val_1(1:length(plot_data{1}(1).xfit),1) = 1;
% Z_Val_2(1:length(plot_data{1}(1).xr),1) = 1;
% Col = [flipud(ROCColorMap);ROCColorMap];
for nROI = 1:nROIs
    AllAucVal(nROI,:) = arrayfun(@(x) x.AUC, plot_data{nROI});
%     MaxAUCVal(nROI) = max(AllAucVal(nROI,:));
end
% plotting
fig = figure;hold on;
set(gcf,'color','w','position',[2000 100 400 600]);


[MaxAUCSort, inds1] = sort(MaxAUCVal);
% SigAUC = find(MaxAUCSort > AUC_ShufThre(inds1));
% MaxAUCIndSort = MaxAUCInd(inds1);
% subplot(1,2,1);
hold on;
imagesc(AllAucVal(inds1,:));
colormap jet;
line([OriginPoint OriginPoint],[1 Frame_length],'color','w','linewidth',2);
% if ~AlineType 
%     plot(AnswFram(inds1),[1:Frame_length],'w.');  
% end
% plot(MaxAUCIndSort(SigAUC),SigAUC,'k.');
% title('Sort in early');
ylabel('Number of Neurons');
xlabel('Time(s)');
set(gca,'clim',[.4 .9],'xtick',[double(OriginPoint):1000/FrameTime:Frame_length],'xticklabel',[0:1:10],'fontweight','bold','fontsize',12,...
    'position',[0.15 0.2 0.6 0.6],'ydir','reverse');
% set(gca,'clim',[.4 .9],'xtick',[double(OriginPoint):1000/FrameTime:Frame_length],'xticklabel',[0:1:10],'fontweight','bold','fontsize',12,...
%     'position',[0.1 0.2 0.3 0.6],'ydir','reverse');
ylim([1 nROIs]);
xlim([1 Frame_length]);
text(OriginPoint-15,112,OnsetMark);
colorbar('Position',[0.8 0.2 0.1 0.3])

% subplot(1,2,2);hold on;
% imagesc(AllAucVal(inds2,:))
% colormap jet;
% line([MinOnsFrame MinOnsFrame],[1 Frame_length],'color','w','linewidth',2);
% if AlineType 
%     plot(TMaxAUCInd(ASigAUC),ASigAUC,'k.');
% else
%     plot(TMaxAUCInd(TSigAUC),TSigAUC,'k.');
% end
% title('Sort in late');
% xlabel('Time(s)');
% set(gca,'clim',[.4 .9],'xtick',[double(OriginPoint):1000/FrameTime:Frame_length],'xticklabel',[0:1:10],'fontweight','bold','fontsize',12,...
%     'position',[0.45 0.2 0.3 0.6],'ydir','reverse');
% ylim([1 nROIs]);
% xlim([1 Frame_length]);
% colorbar('Position',[0.8 0.2 0.04 0.3])
if AlineType == 0
    if UseRawData == 0
        title ({[' AUC Time Courses Tone Onset(mean) '];[ cell2mat(TrialsName(temp_Ind)) ' ' cell2mat(LabelsName(temp_Type))]} );
        if savefig 
            saveas(fig,[SavePath '/' fn(8:19) '_AUC_Mean' TrialsName{temp_Ind}(1:3) LabelsName{temp_Type}(1:3) '.fig']);       
        end
        if savePNG
            saveas(fig,[SavePath '/' fn(8:19) '_AUC_Mean' TrialsName{temp_Ind}(1:3) LabelsName{temp_Type}(1:3) '.png']); 
        end
    else
        title ({['ROI-' num2str(nROI) ' AUC Time Courses Tone Onset(raw) '];...
            [cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]},'interpreter','none' );
        if savefig 
            saveas(fig,[SavePath '/' fn(8:19) '_AUC_Raw' TrialsName{temp_Ind}(1:3) LabelsName{temp_Type}(1:3) '.fig']);        
        end     
        if savePNG
            saveas(fig,[SavePath '/' fn(8:19) '_AUC_Raw' TrialsName{temp_Ind}(1:3) LabelsName{temp_Type}(1:3) '.png']);
        end
    end
else
    if UseRawData == 0
        title ({['ROI-' num2str(nROI) ' AUC Time Courses Choice Onset(mean) '];...
            [cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]},'interpreter','none' );
        if savefig 
            saveas(fig,[SavePath '/' fn(8:19) '_AUC_Mean' TrialsName{temp_Ind}(1:3) LabelsName{temp_Type}(1:3) '.fig']);        
        end   
        if savePNG
            saveas(fig,[SavePath '/' fn(8:19) '_AUC_Mean' TrialsName{temp_Ind}(1:3) LabelsName{temp_Type}(1:3) '.png']); 
        end
    else
        title ({['ROI-' num2str(nROI) ' AUC Time Courses Choice Onset(raw) '];...
            [cell2mat(TrialsName(temp_Ind)) '_' cell2mat(LabelsName(temp_Type))]},'interpreter','none' );
        if savefig 
            saveas(fig,[SavePath '/' fn(8:19) '_AUC_Raw' TrialsName{temp_Ind}(1:3) LabelsName{temp_Type}(1:3) '.fig']);        
        end         
        if savePNG
            saveas(fig,[SavePath '/' fn(8:19) '_AUC_Raw' TrialsName{temp_Ind}(1:3) LabelsName{temp_Type}(1:3) '.png']);   
        end
    end
end    
